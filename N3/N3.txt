Конкатенация - объединение строк. Оператор "+" также может использоваться для конкатенации строк с другими типами данных

В JavaScript часто используется подход, при котором массивы и объекты не изменяются непосредственно, а сначала копируются, а потом изменяются. В таком случае говорят, что массивы и объекты остаются неизменными, то есть иммутабельными.

Иммутабельность присуща примитивам.

Мутабельность - объектам

В JavaScript объекты являются изменяемыми (mutable) типами данных, что означает, что их значения можно изменить после создания. Вот пример мутабельности объектов:

let person = {
  name: "John",
  age: 30
};

console.log(person); // Вывод: { name: "John", age: 30 }

person.age = 35; // Изменение значения свойства "age"

console.log(person); // Вывод: { name: "John", age: 35 }

В приведенном примере мы создали объект "person" с двумя свойствами: "name" и "age". Затем мы изменили значение свойства "age" с 30 на 35, и объект "person" был изменен.

Также можно добавлять новые свойства к объекту после его создания:

let person = {
  name: "John",
  age: 30
};

console.log(person); // Вывод: { name: "John", age: 30 }

person.city = "New York"; // Добавление нового свойства "city"

console.log(person); // Вывод: { name: "John", age: 30, city: "New York" }
В этом примере мы добавили новое свойство "city" со значением "New York" к объекту "person".

Объекты в JavaScript являются ссылочными типами данных, поэтому при присваивании объекта другой переменной или передаче его в функцию, изменения объекта будут отражаться во всех ссылках на него.



В js хранится не тип переменной, а тип примитива, хранящийся в переменной